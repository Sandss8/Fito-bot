import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, ConversationHandler
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
GENDER, AGE, HEIGHT, WEIGHT, ACTIVITY_LEVEL = range(5)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –±–ª—é–¥–∞
CHOOSE_ACTION, ENTER_DISH_NAME, ENTER_INGREDIENTS = range(5, 8)

ACTIVITY_LEVELS = [
    "1. –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
    "2. –õ—ë–≥–∫–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–≥—É–ª–∫–∏",
    "3. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "4. –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 5-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "5. –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "6. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç (2+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –¥–µ–Ω—å)"
]

ACTIVITY_FACTORS = {
    ACTIVITY_LEVELS[0]: 1.2,
    ACTIVITY_LEVELS[1]: 1.375,
    ACTIVITY_LEVELS[2]: 1.55,
    ACTIVITY_LEVELS[3]: 1.725,
    ACTIVITY_LEVELS[4]: 1.9,
    ACTIVITY_LEVELS[5]: 2.1
}

# –ü—Ä–æ—Å—Ç–∞—è –±–∞–∑–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–∫–∫–∞–ª –Ω–∞ 100 –≥)
PRODUCT_CALORIES = {
    '—Ä–∏—Å': 130,
    '–∫—É—Ä–∏—Ü–∞ –∂–∞—Ä–µ–Ω–∞—è': 239,
    '–∫—É—Ä–∏—Ü–∞ –≤–∞—Ä–µ–Ω–∞—è': 165,
    '–≥—Ä–∏–±—ã': 22,
    '–∫–æ–ª–∞': 42,
    '–∫–æ–ª–∞ –∑–µ—Ä–æ': 0
}

user_soda_count = {}

registration = False


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_name = update.message.chat.first_name
    reply_keyboard = [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞"]]
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∫–∞–ª!",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSE_ACTION


async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if str(text) == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" and registration == False:
        await update.message.reply_text(
            f"–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ, –º–Ω–µ –Ω–∞–¥–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
            f"–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–æ—Ç —Ç–∞–∫: |–ü—Ä–∏–º–µ—Ä|"
        )
        reply_keyboard = [["–ú", "–ñ"]]
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–ª:",
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))

        return GENDER
    elif str(text) == "–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞":
        await update.message.reply_text("–ö–∞–∫–æ–µ –±–ª—é–¥–æ –≤—ã –µ–ª–∏ –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç–µ? –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ.")
        return ENTER_DISH_NAME
    else:
        if registration:
            reply_keyboard = [["–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞"]]
        else:
            reply_keyboard = [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞"]]
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                                        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True))
        return CHOOSE_ACTION


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥–µ–Ω–¥–µ—Ä–æ–º
async def gender_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gender = update.message.text.upper()
    if str(gender) not in ['–ú', '–ñ']:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup([["–ú", "–ñ"]], one_time_keyboard=True)
        )
        return GENDER

    context.user_data['gender'] = gender
    gender_text = "–ú—É–∂—Å–∫–æ–π" if gender == "–ú" else "–ñ–µ–Ω—Å–∫–∏–π"
    await update.message.reply_text(f"‚úÖ –í–∞—à –ø–æ–ª: {gender_text}", reply_markup=ReplyKeyboardRemove())

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):\n| 25 |")
    return AGE  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–∑—Ä–∞—Å—Ç–æ–º
async def age_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        age = int(update.message.text)
        if not 10 <= age <= 120:
            raise ValueError
        context.user_data['age'] = age
        await update.message.reply_text(f"‚úÖ –í–∞–º {age} –ª–µ—Ç)")

        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º \n| 175 |')
        return HEIGHT  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–æ—Å—Ç–∞
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ \n| 20 | (10-120)")
        return AGE  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–æ—Å—Ç–æ–º
async def height_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        height = int(update.message.text)
        if not 100 <= height <= 250:
            raise ValueError
        context.user_data['height'] = height  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç
        await update.message.reply_text(f"‚úÖ –í–∞—à —Ä–æ—Å—Ç: {height} —Å–º")

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ \n| 50 | 50,5 | 50.55 |")
        return WEIGHT  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–µ—Å–∞

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ  \n| 150 | (100-250)")
        return HEIGHT  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–æ—Å—Ç–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–µ—Å–æ–º
async def weight_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = update.message.text
    try:
        weight = float(str(weight).replace(',', '.'))
        if not 30 <= weight <= 300:
            raise ValueError
        context.user_data['weight'] = weight  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å
        await update.message.reply_text(f"‚úÖ –í–∞—à –≤–µ—Å: {weight} –∫–≥")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Ä–æ–≤–Ω—è–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        reply_keyboard = [
            [ACTIVITY_LEVELS[0]],  # –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            [ACTIVITY_LEVELS[1], ACTIVITY_LEVELS[2]],  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - 2 –∫–Ω–æ–ø–∫–∏
            [ACTIVITY_LEVELS[3], ACTIVITY_LEVELS[4]],  # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - 2 –∫–Ω–æ–ø–∫–∏
            [ACTIVITY_LEVELS[5]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        ]

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
                resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Å—Ç—Ä–æ—è—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä
            )
        )
        return ACTIVITY_LEVEL

    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å \n| 70 | 70,5 | 70.55 | (30-300)")
        return WEIGHT  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–µ—Å–∞


async def activity_level_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global registration
    registration = True

    activity = update.message.text
    if activity not in ACTIVITY_LEVELS:
        reply_keyboard = [
            [ACTIVITY_LEVELS[0]],
            [ACTIVITY_LEVELS[1], ACTIVITY_LEVELS[2]],
            [ACTIVITY_LEVELS[3], ACTIVITY_LEVELS[4]],
            [ACTIVITY_LEVELS[5]]
        ]
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
            reply_markup=ReplyKeyboardMarkup(
                reply_keyboard,
                one_time_keyboard=True,
                resize_keyboard=True
            )
        )
        return ACTIVITY_LEVEL

    context.user_data['activity_level'] = activity
    await update.message.reply_text(f"‚úÖ –í–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity[2:]}", reply_markup=ReplyKeyboardRemove())

    # –†–∞—Å—á–µ—Ç –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    weight = context.user_data['weight']
    height = context.user_data['height']
    age = context.user_data['age']
    gender = context.user_data['gender']
    activity_factor = ACTIVITY_FACTORS[activity]

    # –§–æ—Ä–º—É–ª–∞ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞
    if gender == "–ú":
        bmr = (10 * weight) + (6.25 * height) - (5 * age) + 5
    else:
        bmr = (10 * weight) + (6.25 * height) - (5 * age) - 161

    daily_calories = bmr * activity_factor

    await update.message.reply_text(
        "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n\n"
        f"üîπ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω: {bmr:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
        f"üîπ –° —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {daily_calories:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å\n\n"
        "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞."
    )

    # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞

    reply_keyboard = [["–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞"]]
    await update.message.reply_text(
        "–ß—Ç–æ –¥–∞–ª—å—à–µ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )

    return CHOOSE_ACTION


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
async def enter_dish_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['dish_name'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –≤–µ—Å –∫–∞–∂–¥–æ–≥–æ –≤ –≥—Ä. –∏–ª–∏ –º–ª.\n–ü—Ä–∏–º–µ—Ä: —Ä–∏—Å 200, –∫—É—Ä–∏—Ü–∞ –∂–∞—Ä–µ–Ω–∞—è 150, –≥—Ä–∏–±—ã 50, –∫–æ–ª–∞ –∑–µ—Ä–æ 330")
    return ENTER_INGREDIENTS


# –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
async def enter_ingredients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    items = text.split(',')
    total_calories = 0
    soda_mentions = 0

    for item in items:
        parts = item.strip().rsplit(' ', 1)
        if len(parts) != 2:
            continue
        name, grams = parts[0].lower(), parts[1]
        try:
            grams = float(grams)
            cals_per_100 = 0
            for key in PRODUCT_CALORIES:
                if key in name:
                    cals_per_100 = PRODUCT_CALORIES[key]
                    if '–∫–æ–ª–∞' in key:
                        soda_mentions += 1
                    break
            total_calories += (cals_per_100 * grams) / 100
        except:
            continue

    user_id = update.effective_user.id
    user_soda_count[user_id] = user_soda_count.get(user_id, 0) + soda_mentions

    msg = f"üçΩÔ∏è –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {total_calories:.0f} –∫–∫–∞–ª."
    if user_soda_count[user_id] >= 3:
        msg += "\n‚ö†Ô∏è –í—ã —á–∞—Å—Ç–æ —É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç–µ –≥–∞–∑–∏—Ä–æ–≤–∫—É. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Ä–µ–¥–Ω–æ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è."

    keyboard = [[KeyboardButton("–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞")]]
    await update.message.reply_text(msg)
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CHOOSE_ACTION


# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CommandHandler('profile', start)],
        states={
            CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_action)],
            GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, gender_handler)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, age_handler)],
            HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, height_handler)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, weight_handler)],
            ACTIVITY_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, activity_level_handler)],
            ENTER_DISH_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_dish_name)],
            ENTER_INGREDIENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_ingredients)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()

    # return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
