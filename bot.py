import os
import logging
from database import Database
from datetime import datetime
import requests
from dotenv import load_dotenv
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

# ============ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ============
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ============ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ============
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
FATSECRET_CLIENT_ID = os.getenv("FATSECRET_CLIENT_ID")
FATSECRET_CLIENT_SECRET = os.getenv("FATSECRET_CLIENT_SECRET")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")  # –ö–ª—é—á –¥–ª—è Yandex Cloud API
YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")  # ID –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ Yandex Cloud

# ============ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ============
GENDER, AGE, HEIGHT, WEIGHT, ACTIVITY_LEVEL = range(5)
START, CHOOSE_ACTION, ENTER_DISH_NAME, ENTER_WEIGHT, CHAT_WITH_AI = range(5, 10)

ACTIVITY_LEVELS = [
    "1. –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
    "2. –õ—ë–≥–∫–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–≥—É–ª–∫–∏",
    "3. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "4. –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 5-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "5. –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "6. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç (2+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –¥–µ–Ω—å)"
]
ACTIVITY_FACTORS = {
    ACTIVITY_LEVELS[0]: 1.2,
    ACTIVITY_LEVELS[1]: 1.375,
    ACTIVITY_LEVELS[2]: 1.55,
    ACTIVITY_LEVELS[3]: 1.725,
    ACTIVITY_LEVELS[4]: 1.9,
    ACTIVITY_LEVELS[5]: 2.1
}


# ============ –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API ============
class YandexGPTAPI:
    API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    def __init__(self, api_key: str, folder_id: str):
        self.api_key = api_key
        self.folder_id = folder_id

    async def get_response(self, message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç YandexGPT API"""
        try:
            headers = {
                "Authorization": f"Api-Key {self.api_key}",
                "Content-Type": "application/json",
            }

            data = {
                "modelUri": f"gpt://{self.folder_id}/yandexgpt-lite",
                "completionOptions": {
                    "stream": False,
                    "temperature": 0.7,
                    "maxTokens": 2000
                },
                "messages": [
                    {
                        "role": "system",
                        "text": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ."
                    },
                    {
                        "role": "user",
                        "text": message
                    }
                ]
            }

            response = requests.post(self.API_URL, headers=headers, json=data, timeout=30)
            response.raise_for_status()

            result = response.json()
            return result['result']['alternatives'][0]['message']['text']

        except Exception as e:
            logger.error(f"YandexGPT API error: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."


# ============ –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FatSecret API ============
class FatSecretAPI:
    TOKEN_URL = "https://oauth.fatsecret.com/connect/token"
    BASE_URL = "https://platform.fatsecret.com/rest/server.api"

    def __init__(self, client_id: str, client_secret: str):
        self.client_id = client_id
        self.client_secret = client_secret
        self._token: str = ""

    def _refresh_token(self):
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        data = {
            "grant_type": "client_credentials",
            "scope": "basic",
            "client_id": self.client_id,
            "client_secret": self.client_secret
        }
        resp = requests.post(self.TOKEN_URL, headers=headers, data=data)
        resp.raise_for_status()
        payload = resp.json()
        if "access_token" not in payload:
            logger.error("FatSecret: no access_token in response %s", payload)
            raise RuntimeError("FatSecret token error")
        self._token = payload["access_token"]

    def search_food(self, query: str) -> dict:
        if not self._token:
            self._refresh_token()
        params = {
            "method": "foods.search",
            "search_expression": query,
            "format": "json"
        }
        headers = {"Authorization": f"Bearer {self._token}"}
        resp = requests.get(self.BASE_URL, params=params, headers=headers)
        resp.raise_for_status()
        return resp.json()


# ============ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä BMR –∏ –∫–∞–ª–æ—Ä–∏–π ============
class CalorieCalculator:
    @staticmethod
    def bmr(gender: str, weight: float, height: float, age: int) -> float:
        return 10 * weight + 6.25 * height - 5 * age + (5 if gender == "–ú" else -161)

    @staticmethod
    def daily_calories(bmr_value: float, activity_level):
        factor = ACTIVITY_FACTORS[f'{activity_level}']
        return bmr_value * factor


# ============ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ============
class UserSession:
    def __init__(self):
        self.data: dict = {}

    def clear(self):
        self.data.clear()


# ============ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–æ—Ç–∞ ============
class BotController:
    def __init__(self):
        self.reply_keyboard = None
        self.db = Database()
        self.fatsecret_api = FatSecretAPI(FATSECRET_CLIENT_ID, FATSECRET_CLIENT_SECRET)
        self.yandex_gpt = YandexGPTAPI(YANDEX_API_KEY, YANDEX_FOLDER_ID)
        self.calc = CalorieCalculator()
        self.sessions: dict[int, UserSession] = {}

    def _get_session(self, user_id: int) -> UserSession:
        if user_id not in self.sessions:
            self.sessions[user_id] = UserSession()
        return self.sessions[user_id]

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_name = update.effective_user.first_name
        reg_done = context.user_data.get('registration_complete', False)

        if reg_done:
            keyboard = [["–ü—Ä–æ—Ñ–∏–ª—å", "–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞"],
                        ["AI –ø–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª"]]
            hello_text = ''
        else:
            keyboard = [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞"],
                        ["AI –ø–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª"]]
            hello_text = f'–ü—Ä–∏–≤–µ—Ç, {user_name}! '
        await update.message.reply_text(
            f"{hello_text}–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return CHOOSE_ACTION

    async def choose_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        sess = self._get_session(update.effective_user.id)
        reg_done = context.user_data.get('registration_complete', False)

        if text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" and not reg_done:
            sess.clear()
            await update.message.reply_text(
                f"–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ, –º–Ω–µ –Ω–∞–¥–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
                f"–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–æ—Ç —Ç–∞–∫: |–ü—Ä–∏–º–µ—Ä|"
            )
            reply_keyboard_gen = [["–ú", "–ñ"]]
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–ª:",
                                            reply_markup=ReplyKeyboardMarkup(reply_keyboard_gen,
                                                                             one_time_keyboard=True))
            return GENDER

        elif text == "–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞":
            # await update.message.reply_text("–ö–∞–∫–æ–µ –±–ª—é–¥–æ –≤—ã –µ–ª–∏ –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç–µ? –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ.")
            # return ENTER_DISH_NAME
            await update.message.reply_text("–°–µ—Ä–≤–∏—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
            return CHOOSE_ACTION

        elif str(text) == "–ü—Ä–æ—Ñ–∏–ª—å":
            if not reg_done:
                await update.message.reply_text(
                    "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                    reply_markup=ReplyKeyboardMarkup([["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]], one_time_keyboard=True)
                )
                return CHOOSE_ACTION

            # –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
            data = self.db.get_user_data(update.effective_user.id)
            text = (
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"‚Ä¢ –ü–æ–ª: {data['gender']}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
                f"‚Ä¢ –†–æ—Å—Ç: {data['height']} —Å–º\n"
                f"‚Ä¢ –í–µ—Å: {data['weight']} –∫–≥\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity_level'][2:]}\n"
                f"‚Ä¢ BMR: {data['bmr']:.0f} –∫–∫–∞–ª\n"
                f"‚Ä¢ –ù–æ—Ä–º–∞: {data['daily_calories']:.0f} –∫–∫–∞–ª\n"
                f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {data['registration_date']}"
            )
            await update.message.reply_text(text)
            return CHOOSE_ACTION

        elif text == "AI –ø–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª":
            await update.message.reply_text("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ —Å AI. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n\n",
                                            reply_markup=ReplyKeyboardRemove())
            await update.message.reply_text("–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                                            reply_markup=ReplyKeyboardMarkup([["/cancel"]], one_time_keyboard=True,
                                                                             resize_keyboard=True))
            return CHAT_WITH_AI

        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:")
            return START

    async def gender(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        gender = update.message.text.upper()
        if gender not in ['–ú', '–ñ']:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=ReplyKeyboardMarkup([["–ú", "–ñ"]], one_time_keyboard=True)
            )
            return GENDER
        self._get_session(update.effective_user.id).data["gender"] = gender
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):\n| 25 |")
        return AGE

    async def age(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            age = int(update.message.text)
            if not 10 <= age <= 120:
                raise ValueError
            self._get_session(update.effective_user.id).data["age"] = age
            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º \n| 175 |')
            return HEIGHT
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ \n| 20 | (10-120)")
            return AGE

    async def height(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            height = int(update.message.text)
            if not 100 <= height <= 250:
                raise ValueError
            self._get_session(update.effective_user.id).data["height"] = height
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ \n| 50 | 50,5 | 50.55 |")
            return WEIGHT
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ  \n| 150 | (100-250)")
            return HEIGHT

    async def weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            weight = float(update.message.text.replace(",", "."))
            if not 30 <= weight <= 300:
                raise ValueError
            self._get_session(update.effective_user.id).data["weight"] = weight

            reply_keyboard = [
                [ACTIVITY_LEVELS[0]],
                [ACTIVITY_LEVELS[1], ACTIVITY_LEVELS[2]],
                [ACTIVITY_LEVELS[3], ACTIVITY_LEVELS[4]],
                [ACTIVITY_LEVELS[5]]
            ]

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard,
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )
            return ACTIVITY_LEVEL
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å \n| 70 | 70,5 | 70.55 | (30-300)")
            return WEIGHT

    async def activity_level(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        sess = self._get_session(user_id)

        activity = update.message.text
        if activity not in ACTIVITY_LEVELS and int(activity[0]) not in range(1, 7):
            reply_keyboard = [
                [ACTIVITY_LEVELS[0]],
                [ACTIVITY_LEVELS[1], ACTIVITY_LEVELS[2]],
                [ACTIVITY_LEVELS[3], ACTIVITY_LEVELS[4]],
                [ACTIVITY_LEVELS[5]]
            ]
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard,
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )
            return ACTIVITY_LEVEL

        if activity.isdigit():
            activity = ACTIVITY_LEVELS[int(activity) - 1]
        self._get_session(update.effective_user.id).data["activity_level"] = activity  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

        await update.message.reply_text(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data['registration_complete'] = True

        bmr_val = self.calc.bmr(
            sess.data["gender"], sess.data["weight"], sess.data["height"], sess.data["age"]
        )
        dc = self.calc.daily_calories(bmr_val, activity)
        await update.message.reply_text(
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n\n"
            f"üîπ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω: {bmr_val:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            f"üîπ –° —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {dc:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å\n\n"
            "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞."
        )

        user_data = {
            "user_id": user_id,
            "username": update.effective_user.username,
            "first_name": update.effective_user.first_name,
            "last_name": update.effective_user.last_name,
            **sess.data,
            "bmr": bmr_val,
            "daily_calories": dc,
            "registration_date": datetime.now().isoformat(sep=" ", timespec="seconds")
        }
        self.db.save_user_data(user_data)
        return await self.start(update, context)

    async def enter_dish_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.message.text
        sess = self._get_session(update.effective_user.id)
        sess.data["dish_query"] = query

        try:
            result = self.fatsecret_api.search_food(query)
            foods = result.get("foods", {}).get("food", [])
            if not foods:
                raise ValueError("–Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            food = foods[0]
            sess.data["food"] = food
            await update.message.reply_text(
                f"–ù–∞—à—ë–ª: {food['food_name']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {food.get('food_description', '-')}\n–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–º–º—ã:"
            )
            return ENTER_WEIGHT
        except Exception:
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            return START

    async def enter_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        grams = float(update.message.text.replace(",", "."))
        sess = self._get_session(update.effective_user.id)
        food = sess.data.get("food", {})
        desc = food.get("food_description", "")
        if "Calories:" not in desc:
            return await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–ª–æ—Ä–∏—è—Ö")
        per100 = float(desc.split("Calories:")[-1].split("kcal")[0].strip())
        total = per100 * grams / 100
        await update.message.reply_text(f"{grams:.0f} –≥ ‚âà {total:.0f} –∫–∫–∞–ª")

        meal = {
            "food_name": food["food_name"],
            "calories": total,
            "protein": None, "fat": None, "carbs": None,
            "weight": grams
        }
        self.db.save_meal(update.effective_user.id, meal)  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        kb = [[KeyboardButton("–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞")]]
        return await update.message.reply_text("–ì–æ—Ç–æ–≤–æ!", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

    async def chat_with_ai(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_message = update.message.text

        if user_message.lower() in ["/cancel", "–í—ã–π—Ç–∏ –∏–∑ AI"]:
            await update.message.reply_text(
                "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —á–∞—Ç–∞ —Å AI.")
            return START

        ai_response = await self.yandex_gpt.get_response(user_message)
        await update.message.reply_text(ai_response, parse_mode="Markdown")
        return CHAT_WITH_AI

    async def error(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logger.exception("Handler error")
        if update.message:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

    def run(self):
        app = ApplicationBuilder().token(TOKEN).build()

        conv = ConversationHandler(
            entry_points=[CommandHandler("start", self.start)],
            states={
                START: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.start)],
                CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.choose_action)],
                GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.gender)],
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.age)],
                HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.height)],
                WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.weight)],
                ACTIVITY_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.activity_level)],
                ENTER_DISH_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_dish_name)],
                ENTER_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_weight)],
                CHAT_WITH_AI: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.chat_with_ai)],
            },
            fallbacks=[CommandHandler("cancel", self.start)]
        )

        app.add_handler(conv)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()


if __name__ == "__main__":
    BotController().run()
