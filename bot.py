# bot.py

import os
import logging
from datetime import datetime
import urllib.parse
import requests
from dotenv import load_dotenv
from telegram import (
    Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters, ConversationHandler
)

from database import Database

# ============ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ============
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ============ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ============
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
FATSECRET_CLIENT_ID = os.getenv("FATSECRET_CLIENT_ID")
FATSECRET_CLIENT_SECRET = os.getenv("FATSECRET_CLIENT_SECRET")

# ============ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ============
(START, GENDER, AGE, HEIGHT, WEIGHT, ACTIVITY_LEVEL,
 CHOOSE_ACTION, ENTER_DISH_NAME, ENTER_WEIGHT,
 ADD_DISH, DISH_SOURCE,
 CUSTOM_NAME, CUSTOM_VOLUME_CHECK, CUSTOM_INGREDIENTS_WEIGHT, CUSTOM_INGREDIENTS_LIST, CUSTOM_RECIPE,
 STORE_NAME, STORE_CALORIES
 ) = range(18)

ACTIVITY_LEVELS = [
    "1. –ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
    "2. –õ—ë–≥–∫–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏, –ø—Ä–æ–≥—É–ª–∫–∏",
    "3. –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 4-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "4. –§–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 5-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "5. –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é",
    "6. –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç (2+ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –¥–µ–Ω—å)"
]
ACTIVITY_FACTORS = {level: factor for level, factor in zip(ACTIVITY_LEVELS, [1.2, 1.375, 1.55, 1.725, 1.9, 2.1])}


# ============ –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenFoodFacts API ============
class OpenFoodFactsAPI:
    SEARCH_URL = "https://world.openfoodfacts.org/cgi/search.pl"

    def search_food(self, query: str) -> dict:
        params = {"search_terms": query, "search_simple": 1,
                  "action": "process", "json": 1, "page_size": 5}
        resp = requests.get(self.SEARCH_URL, params=params, timeout=5)
        resp.raise_for_status()
        data = resp.json().get("products", [])
        if not data:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        return data[0]  # –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç


# ============ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä BMR –∏ –∫–∞–ª–æ—Ä–∏–π ============
class CalorieCalculator:
    @staticmethod
    def bmr(g, w, h, a):
        return 10 * w + 6.25 * h - 5 * a + (5 if g == "–ú" else -161)

    @staticmethod
    def daily_calories(bmr, alvl):
        return bmr * ACTIVITY_FACTORS[f'{alvl}']


# ============ –°–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ============
class UserSession:
    def __init__(self):
        self.data: dict = {}

    def clear(self):
        self.data.clear()


# ============ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–æ—Ç–∞ ============
class BotController:
    def __init__(self):
        self.reply_keyboard = None
        self.db = Database()
        self.api = OpenFoodFactsAPI()
        self.calc = CalorieCalculator()
        self.sessions: dict[int, UserSession] = {}

    def _get_session(self, user_id: int) -> UserSession:
        if user_id not in self.sessions:
            self.sessions[user_id] = UserSession()
        return self.sessions[user_id]

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_name = update.effective_user.first_name
        reg_done = context.user_data.get('registration_complete', False)

        if reg_done:
            keyboard = [["–ü—Ä–æ—Ñ–∏–ª—å", "–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ"],
                        ["–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞"]]
            hello_text = ''
        else:
            keyboard = [["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞"]]
            hello_text = f'–ü—Ä–∏–≤–µ—Ç, {user_name}! '
        await update.message.reply_text(
            f"{hello_text}–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return CHOOSE_ACTION

    async def choose_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        text = update.message.text
        sess = self._get_session(update.effective_user.id)
        reg_done = context.user_data.get('registration_complete', False)
        if str(text) == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" and not reg_done:
            sess.clear()
            await update.message.reply_text(
                f"–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ, –º–Ω–µ –Ω–∞–¥–æ –∑–∞–¥–∞—Ç—å –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
                f"–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–æ—Ç —Ç–∞–∫: |–ü—Ä–∏–º–µ—Ä|"
            )
            reply_keyboard_gen = [["–ú", "–ñ"]]
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–ª:",
                                            reply_markup=ReplyKeyboardMarkup(reply_keyboard_gen,
                                                                             one_time_keyboard=True))
            return GENDER
        elif str(text) == "–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞":
            await update.message.reply_text("–ö–∞–∫–æ–µ –±–ª—é–¥–æ –≤—ã –µ–ª–∏ –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç–µ? –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ.")
            return ENTER_DISH_NAME
        elif str(text) == "–ü—Ä–æ—Ñ–∏–ª—å":
            if not reg_done:
                await update.message.reply_text(
                    "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
                    reply_markup=ReplyKeyboardMarkup([["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]], one_time_keyboard=True)
                )
                return CHOOSE_ACTION

            # –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
            data = self.db.get_user_data(update.effective_user.id)
            text = (
                f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                f"‚Ä¢ –ü–æ–ª: {data['gender']}\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
                f"‚Ä¢ –†–æ—Å—Ç: {data['height']} —Å–º\n"
                f"‚Ä¢ –í–µ—Å: {data['weight']} –∫–≥\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity_level'][2:]}\n"
                f"‚Ä¢ BMR: {data['bmr']:.0f} –∫–∫–∞–ª\n"
                f"‚Ä¢ –ù–æ—Ä–º–∞: {data['daily_calories']:.0f} –∫–∫–∞–ª\n"
                f"‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {data['registration_date']}"
            )
            await update.message.reply_text(text)
            return CHOOSE_ACTION
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:")
            return START

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
    async def gender(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        gender = update.message.text.upper()
        if str(gender) not in ['–ú', '–ñ']:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=ReplyKeyboardMarkup([["–ú", "–ñ"]], one_time_keyboard=True)
            )
            return GENDER
        self._get_session(update.effective_user.id).data["gender"] = gender
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):\n| 25 |")
        return AGE  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞

    async def age(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            age = int(update.message.text)
            if not 10 <= age <= 120:
                raise ValueError
            self._get_session(update.effective_user.id).data["age"] = age

            await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º \n| 175 |')
            return HEIGHT  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–æ—Å—Ç–∞
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ \n| 20 | (10-120)")
            return AGE  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞

    async def height(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            height = int(update.message.text)
            if not 100 <= height <= 250:
                raise ValueError
            self._get_session(update.effective_user.id).data["height"] = height  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç

            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ \n| 50 | 50,5 | 50.55 |")
            return WEIGHT  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–µ—Å–∞

        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ  \n| 150 | (100-250)")
            return HEIGHT  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–æ—Å—Ç–∞

    async def weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            weight = float(update.message.text.replace(",", "."))
            if not 30 <= weight <= 300:
                raise ValueError
            self._get_session(update.effective_user.id).data["weight"] = weight  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Ä–æ–≤–Ω—è–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            reply_keyboard = [
                [ACTIVITY_LEVELS[0]],  # –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                [ACTIVITY_LEVELS[1], ACTIVITY_LEVELS[2]],  # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - 2 –∫–Ω–æ–ø–∫–∏
                [ACTIVITY_LEVELS[3], ACTIVITY_LEVELS[4]],  # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - 2 –∫–Ω–æ–ø–∫–∏
                [ACTIVITY_LEVELS[5]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å - –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
            ]

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard,
                    one_time_keyboard=True,  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
                    resize_keyboard=True  # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Å—Ç—Ä–æ—è—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä
                )
            )
            return ACTIVITY_LEVEL

        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å \n| 70 | 70,5 | 70.55 | (30-300)")
            return WEIGHT  # –û—Å—Ç–∞–µ–º—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–µ—Å–∞

    async def activity_level(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        sess = self._get_session(user_id)

        activity = update.message.text
        if activity not in ACTIVITY_LEVELS and int(activity[0]) not in range(1, 7):
            reply_keyboard = [
                [ACTIVITY_LEVELS[0]],
                [ACTIVITY_LEVELS[1], ACTIVITY_LEVELS[2]],
                [ACTIVITY_LEVELS[3], ACTIVITY_LEVELS[4]],
                [ACTIVITY_LEVELS[5]]
            ]
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard,
                    one_time_keyboard=True,
                    resize_keyboard=True
                )
            )
            return ACTIVITY_LEVEL

        if activity.isdigit():
            activity = ACTIVITY_LEVELS[int(activity) - 1]
        self._get_session(update.effective_user.id).data["activity_level"] = activity  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

        # –º–µ–Ω—é –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await update.message.reply_text(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data['registration_complete'] = True

        # —Å—á–∏—Ç–∞–µ–º
        bmr_val = self.calc.bmr(
            sess.data["gender"], sess.data["weight"], sess.data["height"], sess.data["age"]
        )
        dc = self.calc.daily_calories(bmr_val, activity)
        await update.message.reply_text(
            "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:\n\n"
            f"üîπ –û—Å–Ω–æ–≤–Ω–æ–π –æ–±–º–µ–Ω: {bmr_val:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å\n"
            f"üîπ –° —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {dc:.0f} –∫–∫–∞–ª/–¥–µ–Ω—å\n\n"
            "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–æ—Ä–º–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞."
        )

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥
        user_data = {
            "user_id": user_id,
            "username": update.effective_user.username,
            "first_name": update.effective_user.first_name,
            "last_name": update.effective_user.last_name,
            **sess.data,
            "bmr": bmr_val,
            "daily_calories": dc,
            "registration_date": datetime.now().isoformat(sep=" ", timespec="seconds")
        }
        self.db.save_user_data(user_data)
        return await self.start(update, context)

    # --- –ü–æ–¥—Å—á—ë—Ç –∫–∞–ª–æ—Ä–∏–π –≤ –±–ª—é–¥–µ ---
    async def enter_dish_name(self, upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
        query = upd.message.text
        sess = self._get_session(upd.effective_user.id)

        try:
            product = self.api.search_food(query)
        except Exception as e:
            logger.error("OFF API error: %s", e)
            await upd.message.reply_text("–°–µ—Ä–≤–∏—Å OpenFoodFacts –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return CHOOSE_ACTION

        sess.data["food_name"] = product.get("product_name", "‚Äî")
        nutr = product.get("nutriments", {})

        # –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –Ω–∞ 100 –≥
        sess.data["kcal_100g"] = nutr.get("energy-kcal_100g", 0)
        sess.data["prot_100g"] = nutr.get("proteins_100g", 0)
        sess.data["fat_100g"] = nutr.get("fat_100g", 0)
        sess.data["carb_100g"] = nutr.get("carbohydrates_100g", 0)

        await upd.message.reply_text(
            f"üîç –ù–∞—à—ë–ª: {sess.data['food_name']}\n"
            f"–ö–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {sess.data['kcal_100g']:.0f} –∫–∫–∞–ª/100 –≥\n"
            f"–ë–µ–ª–∫–∏: {sess.data['prot_100g']:.1f} –≥, "
            f"–ñ–∏—Ä—ã: {sess.data['fat_100g']:.1f} –≥, "
            f"–£–≥–ª.: {sess.data['carb_100g']:.1f} –≥\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞:"
        )
        return ENTER_WEIGHT

    async def enter_weight(self, upd: Update, ctx: ContextTypes.DEFAULT_TYPE):
        text = upd.message.text.replace(",", ".")
        sess = self._get_session(upd.effective_user.id)

        try:
            grams = float(text)
        except ValueError:
            await upd.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –≥—Ä–∞–º–º–∞—Ö.")
            return ENTER_WEIGHT

        # —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏—é
        kcal = sess.data["kcal_100g"] * grams / 100
        prot = sess.data["prot_100g"] * grams / 100
        fat = sess.data["fat_100g"] * grams / 100
        carb = sess.data["carb_100g"] * grams / 100

        await upd.message.reply_text(
            f"{grams:.0f} –≥ ‚âà {kcal:.0f} –∫–∫–∞–ª\n"
            f"–ë–µ–ª–∫–∏: {prot:.1f} –≥, –ñ–∏—Ä—ã: {fat:.1f} –≥, –£–≥–ª.: {carb:.1f} –≥"
        )

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏—ë–º –ø–∏—â–∏
        meal = {
            "food_name": sess.data["food_name"],
            "calories": kcal,
            "protein": prot,
            "fat": fat,
            "carbs": carb,
            "weight": grams
        }
        self.db.save_meal(upd.effective_user.id, meal)

        kb = [[KeyboardButton("–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞")]]
        await upd.message.reply_text("–ì–æ—Ç–æ–≤–æ!", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))
        return CHOOSE_ACTION

    async def error(self, update: Update | None, context: ContextTypes.DEFAULT_TYPE):
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É
        logger.error("Uncaught exception", exc_info=context.error)

        # –ï—Å–ª–∏ update –µ—Å—Ç—å –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å message ‚Äî –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update is not None and getattr(update, "message", None):
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            except Exception as send_exc:
                # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.error("Failed to send error message to user: %s", send_exc)

    def run(self):
        app = ApplicationBuilder().token(TOKEN).build()

        conv = ConversationHandler(
            entry_points=[CommandHandler("start", self.start)],
            states={
                START: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.start)],
                CHOOSE_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.choose_action)],
                GENDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.gender)],
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.age)],
                HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.height)],
                WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.weight)],
                ACTIVITY_LEVEL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.activity_level)],
                ENTER_DISH_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_dish_name)],
                ENTER_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.enter_weight)],
            },
            fallbacks=[]
        )

        async def reset(_):
            await app.bot.delete_webhook(drop_pending_updates=True)

        app.post_init = reset

        app.add_handler(conv)
        app.add_error_handler(self.error)
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    BotController().run()
