from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, filters
from config import Config
from base import BaseHandler
from services.fatsecret import FatSecretAPI
import logging

logger = logging.getLogger(__name__)


class FoodTrackingHandler(BaseHandler):
    def __init__(self):
        super().__init__()
        self.fatsecret = FatSecretAPI()
        self.message_handlers = [
            (filters.Text(["–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞"]) & ~filters.COMMAND, self.start_tracking),
            (filters.TEXT & ~filters.COMMAND, self.handle_food_input)
        ]

    async def start_tracking(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π"""
        await update.message.reply_text(
            "–ö–∞–∫–æ–µ –±–ª—é–¥–æ –≤—ã –µ–ª–∏ –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç–µ? –û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ:\n"
            "–ü—Ä–∏–º–µ—Ä: |–ö—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º|"
        )
        context.user_data['food_tracking_stage'] = 'dish_name'
        return Config.ENTER_DISH_NAME

    async def handle_food_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–æ—É—Ç–∏–Ω–≥ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        current_stage = context.user_data.get('food_tracking_stage')

        if current_stage == 'dish_name':
            return await self.handle_dish_name(update, context)
        elif current_stage == 'weight':
            return await self.handle_weight(update, context)

        return Config.CHOOSE_ACTION

    async def handle_dish_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞"""
        dish_name = update.message.text
        context.user_data['dish_name'] = dish_name

        try:
            # –ü–æ–∏—Å–∫ –±–ª—é–¥–∞ –≤ FatSecret API
            search_result = self.fatsecret.search_food(dish_name)

            if not search_result.get('foods', {}).get('food'):
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–º—É –±–ª—é–¥—É.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ–¥—É–∫—Ç."
                )
                return Config.CHOOSE_ACTION

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –ø–æ–∏—Å–∫–∞
            food_item = search_result['foods']['food'][0]
            context.user_data['current_food'] = food_item

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üîç –ù–∞–π–¥–µ–Ω–æ: {food_item['food_name']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {food_item.get('food_description', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏:\n"
                "–ü—Ä–∏–º–µ—Ä: |150|"
            )

            await update.message.reply_text(message)
            context.user_data['food_tracking_stage'] = 'weight'
            return Config.ENTER_WEIGHT

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–ª—é–¥–∞: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª—é–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return Config.CHOOSE_ACTION

    async def handle_weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π"""
        try:
            weight = float(update.message.text.replace(',', '.'))
            if not 0 < weight < 5000:  # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤–µ—Å–∞
                raise ValueError

            food_item = context.user_data.get('current_food')
            if not food_item:
                await update.message.reply_text(
                    "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ —É—Ç–µ—Ä—è–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
                )
                return Config.CHOOSE_ACTION

            # –ü–∞—Ä—Å–∏–º –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            desc = food_item.get('food_description', '')
            if 'Calories:' not in desc:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ."
                )
                return Config.CHOOSE_ACTION

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100–≥
            calories_part = desc.split('Calories:')[-1].split('kcal')[0].strip()
            calories_per_100g = float(calories_part)

            # –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏
            total_calories = (calories_per_100g * weight) / 100

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            nutrition_info = self._parse_nutrition_info(desc)
            result_message = (
                f"üçΩ {food_item['food_name']} - {weight:.0f}–≥\n"
                f"üîπ –ö–∞–ª–æ—Ä–∏–∏: {total_calories:.0f} –∫–∫–∞–ª\n"
            )

            if nutrition_info:
                result_message += "\n".join(
                    f"üîπ {k}: {v * weight / 100:.1f}{unit}"
                    for k, (v, unit) in nutrition_info.items()
                )

            await update.message.reply_text(result_message)

            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            reply_keyboard = [[KeyboardButton("–ü–æ–¥—Å—á—ë—Ç –∫–∫–∞–ª –±–ª—é–¥–∞")]]
            await update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –¥—Ä—É–≥–æ–µ –±–ª—é–¥–æ?",
                reply_markup=ReplyKeyboardMarkup(
                    reply_keyboard,
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )

            return Config.CHOOSE_ACTION

        except ValueError:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5000).\n"
                "–ü—Ä–∏–º–µ—Ä: |200| –∏–ª–∏ |150.5|"
            )
            return Config.ENTER_WEIGHT

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return Config.CHOOSE_ACTION

    def _parse_nutrition_info(self, description: str) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–ñ–£ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
        nutrition = {}
        parts = description.split('|')

        for part in parts:
            part = part.strip()
            if ':' in part:
                name, value = part.split(':', 1)
                name = name.strip()
                value = value.strip()

                if 'g' in value:
                    num = value.replace('g', '').strip()
                    nutrition[name] = (float(num), 'g')
                elif 'mg' in value:
                    num = value.replace('mg', '').strip()
                    nutrition[name] = (float(num), 'mg')

        return nutrition
